name: Build Pipeline Test

on:          
  push:
    branches: [ master ]
    paths-ignore:
      - '.github/**'      
      - 'pom.xml'
      - '*.md'
  workflow_dispatch: 
  
env:
  MANAGE_BRANCH: master
  ARTIFACT_NAME: api-demo
  CONTAINER_REGISTRY : gableesaving.azurecr.io
  CONTAINER_REPO: gableesaving.azurecr.io/api-demo
  POM_VERSION_LINE_NUMBER: 13
  
jobs:
  generate-version:
    runs-on: ubuntu-latest    
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:        
          ref: ${{ env.MANAGE_BRANCH }}      

      - name: Generate new version
        run: | 
            #ls -l
            cur_version=$(head -${{ env.POM_VERSION_LINE_NUMBER }} pom.xml|tail -1|grep -oPm1 "(?<=<version>)[^<]+")
            echo "cur_version=${cur_version}"
            major_version=$(echo ${cur_version}|awk -F'.' '{print($1)}')
            minor_version=$(echo ${cur_version}|awk -F'.' '{print($2)}')
            build_version=$(echo ${cur_version}|awk -F'.' '{print($3)}')
            ((new_build_version=build_version+1))
            new_version=${major_version}.${minor_version}.${new_build_version}
            echo "new_version=${new_version}"
            mkdir version
            echo ${new_version} > version/version.txt
            sed -i ${{ env.POM_VERSION_LINE_NUMBER }}"s/<version>${cur_version}<\/version>/<version>${new_version}<\/version>/" pom.xml  
            cp pom.xml version/
            
      - name: Upload version artifact
        uses: actions/upload-artifact@v1
        with:
          name: version          
          path: version
          
  build-container:
    runs-on: ubuntu-latest    
    needs: [generate-version]
    #environment: ${{ env.TARGET_ENV }}
    
    steps:    
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:        
          ref: ${{ env.MANAGE_BRANCH }}      
          
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          
      - name: Download version artifact
        uses: actions/download-artifact@v1
        with:
          name: version

      - name: Check New Version         
        run: |
          new_version=$(cat version/version.txt)
          echo "Version is ${new_version}"
          echo "VERSION_NO=${new_version} " >> $GITHUB_ENV  
          cp -f version/pom.xml .
          pom_version=$(head -${{ env.POM_VERSION_LINE_NUMBER }} pom.xml|tail -1|grep -oPm1 "(?<=<version>)[^<]+")
          echo "pom_version=${pom_version}"     
          
      - name: Build with Maven
        run: mvn package -Pcoverage 

      - run: | 
          ls -l target      

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: target/*.jar

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
            login-server: ${{ env.CONTAINER_REGISTRY }}          
            username: ${{ secrets.ACR_USERNAME }}
            password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Container Image    
        run: |
            docker build . -t ${{ env.CONTAINER_REPO }}:${{ env.VERSION_NO }} 
            docker push ${{ env.CONTAINER_REPO }}:${{ env.VERSION_NO }} 
          
  set-version:
    runs-on: ubuntu-latest    
    needs: [build-container]
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:        
          ref: ${{ env.MANAGE_BRANCH }}    
    
      - name: Download version artifact
        uses: actions/download-artifact@v1
        with:
          name: version
          
      - name: Check New Version         
        run: |
          new_version=$(cat version/version.txt)
          echo "Version is ${new_version}"
          echo "VERSION_NO=${new_version} " >> $GITHUB_ENV  
          cp -f version/pom.xml .
          pom_version=$(head -${{ env.POM_VERSION_LINE_NUMBER }} pom.xml|tail -1|grep -oPm1 "(?<=<version>)[^<]+")
          echo "pom_version=${pom_version}"     
           
      - name: Commit pom.xml files
        run: |          
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pom.xml
          git commit -m "update pom.xml version to be ${{ env.VERSION_NO }}"
          
      - name: Push pom.xml changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.MANAGE_BRANCH }}  
